name: Build and Publish Docker

on:
  push:
    branches:
      - main
      - develop
      - "feat/s2n-quic"

env:
  REGISTRY_IMAGE: jqtype/rpxy

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: GitHub Environment
        run: echo "BRANCH=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY_IMAGE }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Release build and push
        if: ${{ env.BRANCH == 'main' }}
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY_IMAGE }}:latest
          file: ./docker/Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          labels: ${{ steps.meta.outputs.labels }}

      - name: Release build and push slim
        if: ${{ env.BRANCH == 'main' }}
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY_IMAGE }}:slim, ${{ env.REGISTRY_IMAGE }}:latest-slim
          build-contexts: |
            messense/rust-musl-cross:amd64-musl=docker-image://messense/rust-musl-cross:x86_64-musl
            messense/rust-musl-cross:arm64-musl=docker-image://messense/rust-musl-cross:aarch64-musl
          file: ./docker/Dockerfile.slim
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          labels: ${{ steps.meta.outputs.labels }}

      - name: Nightly build and push
        if: ${{ env.BRANCH == 'develop' }}
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY_IMAGE }}:nightly
          file: ./docker/Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          labels: ${{ steps.meta.outputs.labels }}

      # 今Pushし放題なので注意
      - name: Nightly build and push s2n-quic
        uses: docker/build-push-action@v4
        with:
          context: .
          build-args: |
            "CARGO_FEATURES=--no-default-features --features http3-s2n"
            "ADDITIONAL_DEPS=pkg-config libssl-dev cmake libclang1 gcc g++"
          push: true
          tags: |
            ${{ env.REGISTRY_IMAGE }}:nightly-s2n
          file: ./docker/Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          labels: ${{ steps.meta.outputs.labels }}

      - name: Nightly build and push slim
        if: ${{ env.BRANCH == 'develop' }}
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY_IMAGE }}:nightly-slim
          build-contexts: |
            messense/rust-musl-cross:amd64-musl=docker-image://messense/rust-musl-cross:x86_64-musl
            messense/rust-musl-cross:arm64-musl=docker-image://messense/rust-musl-cross:aarch64-musl
          file: ./docker/Dockerfile.slim
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          labels: ${{ steps.meta.outputs.labels }}
